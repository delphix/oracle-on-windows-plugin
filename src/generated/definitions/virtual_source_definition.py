#
# Copyright (c) 2019 by Delphix. All rights reserved.
#
from __future__ import absolute_import
from datetime import date, datetime

from generated.definitions.base_model_ import (
    Model, GeneratedClassesError, GeneratedClassesTypeError)
from generated.definitions.virtual_source_definition_custom_init_params import VirtualSourceDefinitionCustomInitParams
import re
from generated import util

class VirtualSourceDefinition(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, username='', mount_path='', custom_init_params_file='', custom_init_params=None, archivelog_mode=False, password='', instance_name='', db_name='', dbunique_name='', validate=True):
        """VirtualSourceDefinition - a model defined in Swagger. The type of some of these
        attributes can be defined as a List[ERRORUNKNOWN]. This just means they
        are a list of any type.

            :param username: The username of this VirtualSourceDefinition.
            :type username: str
            :param mount_path: The mount_path of this VirtualSourceDefinition.
            :type mount_path: str
            :param custom_init_params_file: The custom_init_params_file of this VirtualSourceDefinition.
            :type custom_init_params_file: str
            :param custom_init_params: The custom_init_params of this VirtualSourceDefinition.
            :type custom_init_params: List[VirtualSourceDefinitionCustomInitParams]
            :param archivelog_mode: The archivelog_mode of this VirtualSourceDefinition.
            :type archivelog_mode: bool
            :param password: The password of this VirtualSourceDefinition.
            :type password: str
            :param instance_name: The instance_name of this VirtualSourceDefinition.
            :type instance_name: str
            :param db_name: The db_name of this VirtualSourceDefinition.
            :type db_name: str
            :param dbunique_name: The dbunique_name of this VirtualSourceDefinition.
            :type dbunique_name: str
            :param validate: If the validation should be done during init. This
            should only be called internally when calling from_dict.
            :type validate: bool
        """
        self.swagger_types = {
            'username': str,
            'mount_path': str,
            'custom_init_params_file': str,
            'custom_init_params': util.convert_type('List[VirtualSourceDefinitionCustomInitParams]'),
            'archivelog_mode': bool,
            'password': str,
            'instance_name': str,
            'db_name': str,
            'dbunique_name': str
        }

        self.attribute_map = {
            'username': 'username',
            'mount_path': 'mountPath',
            'custom_init_params_file': 'customInitParamsFile',
            'custom_init_params': 'customInitParams',
            'archivelog_mode': 'archivelogMode',
            'password': 'password',
            'instance_name': 'instanceName',
            'db_name': 'dbName',
            'dbunique_name': 'dbuniqueName'
        }
        
        # Validating the attribute username and then saving it.
        if validate and username is None:
            raise GeneratedClassesError(
                "The required parameter 'username' must not be 'None'.")
        type_error = GeneratedClassesTypeError.type_error(VirtualSourceDefinition,
                                                          'username',
                                                          username,
                                                          str,
                                                          True)
        if validate and type_error:
            raise type_error
        self._username = username

        # Validating the attribute mount_path and then saving it.
        if validate and mount_path is None:
            raise GeneratedClassesError(
                "The required parameter 'mount_path' must not be 'None'.")
        type_error = GeneratedClassesTypeError.type_error(VirtualSourceDefinition,
                                                          'mount_path',
                                                          mount_path,
                                                          str,
                                                          True)
        if validate and type_error:
            raise type_error
        self._mount_path = mount_path

        # Validating the attribute custom_init_params_file and then saving it.
        type_error = GeneratedClassesTypeError.type_error(VirtualSourceDefinition,
                                                          'custom_init_params_file',
                                                          custom_init_params_file,
                                                          str,
                                                          False)
        if validate and type_error:
            raise type_error
        self._custom_init_params_file = custom_init_params_file

        # Validating the attribute custom_init_params and then saving it.
        expected_type = util.convert_type('List[VirtualSourceDefinitionCustomInitParams]')
        element_type = util.get_contained_type('List[VirtualSourceDefinitionCustomInitParams]')
        type_error = GeneratedClassesTypeError.type_error(VirtualSourceDefinition,
                                                          'custom_init_params',
                                                          custom_init_params,
                                                          expected_type,
                                                          False,
                                                          element_type)
        if validate and type_error:
            raise type_error
        self._custom_init_params = custom_init_params

        # Validating the attribute archivelog_mode and then saving it.
        type_error = GeneratedClassesTypeError.type_error(VirtualSourceDefinition,
                                                          'archivelog_mode',
                                                          archivelog_mode,
                                                          bool,
                                                          False)
        if validate and type_error:
            raise type_error
        self._archivelog_mode = archivelog_mode

        # Validating the attribute password and then saving it.
        if validate and password is None:
            raise GeneratedClassesError(
                "The required parameter 'password' must not be 'None'.")
        type_error = GeneratedClassesTypeError.type_error(VirtualSourceDefinition,
                                                          'password',
                                                          password,
                                                          str,
                                                          True)
        if validate and type_error:
            raise type_error
        self._password = password

        # Validating the attribute instance_name and then saving it.
        if validate and instance_name is None:
            raise GeneratedClassesError(
                "The required parameter 'instance_name' must not be 'None'.")
        type_error = GeneratedClassesTypeError.type_error(VirtualSourceDefinition,
                                                          'instance_name',
                                                          instance_name,
                                                          str,
                                                          True)
        if validate and type_error:
            raise type_error
        self._instance_name = instance_name

        # Validating the attribute db_name and then saving it.
        if validate and db_name is None:
            raise GeneratedClassesError(
                "The required parameter 'db_name' must not be 'None'.")
        type_error = GeneratedClassesTypeError.type_error(VirtualSourceDefinition,
                                                          'db_name',
                                                          db_name,
                                                          str,
                                                          True)
        if validate and type_error:
            raise type_error
        if (db_name is not None
                and not re.search('^$|^[_a-zA-Z0-9]*$', db_name)):
            raise GeneratedClassesError(
                "Invalid value for 'db_name', was '{}' but must follow the"
                " pattern '^$|^[_a-zA-Z0-9]*$'.".format(db_name))
        self._db_name = db_name

        # Validating the attribute dbunique_name and then saving it.
        if validate and dbunique_name is None:
            raise GeneratedClassesError(
                "The required parameter 'dbunique_name' must not be 'None'.")
        type_error = GeneratedClassesTypeError.type_error(VirtualSourceDefinition,
                                                          'dbunique_name',
                                                          dbunique_name,
                                                          str,
                                                          True)
        if validate and type_error:
            raise type_error
        if (dbunique_name is not None
                and not re.search('^$|^[_a-zA-Z0-9]*$', dbunique_name)):
            raise GeneratedClassesError(
                "Invalid value for 'dbunique_name', was '{}' but must follow the"
                " pattern '^$|^[_a-zA-Z0-9]*$'.".format(dbunique_name))
        self._dbunique_name = dbunique_name
    @classmethod
    def from_dict(cls, dikt):
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The virtualSourceDefinition of this VirtualSourceDefinition.
        :rtype: VirtualSourceDefinition
        """
        return util.deserialize_model(dikt, cls)

    @property
    def username(self):
        """Gets the username of this VirtualSourceDefinition.

        Oracle User Name

        :return: The username of this VirtualSourceDefinition.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this VirtualSourceDefinition.

        Oracle User Name

        :param username: The username of this VirtualSourceDefinition.
        :type username: str
        """
        # Validating the attribute username and then saving it.
        if username is None:
            raise GeneratedClassesError(
                "The required parameter 'username' must not be 'None'.")
        type_error = GeneratedClassesTypeError.type_error(VirtualSourceDefinition,
                                                          'username',
                                                          username,
                                                          str,
                                                          True)
        if type_error:
            raise type_error
        self._username = username

    @property
    def mount_path(self):
        """Gets the mount_path of this VirtualSourceDefinition.

        Where to mount storage onto the target host while provisioning

        :return: The mount_path of this VirtualSourceDefinition.
        :rtype: str
        """
        return self._mount_path

    @mount_path.setter
    def mount_path(self, mount_path):
        """Sets the mount_path of this VirtualSourceDefinition.

        Where to mount storage onto the target host while provisioning

        :param mount_path: The mount_path of this VirtualSourceDefinition.
        :type mount_path: str
        """
        # Validating the attribute mount_path and then saving it.
        if mount_path is None:
            raise GeneratedClassesError(
                "The required parameter 'mount_path' must not be 'None'.")
        type_error = GeneratedClassesTypeError.type_error(VirtualSourceDefinition,
                                                          'mount_path',
                                                          mount_path,
                                                          str,
                                                          True)
        if type_error:
            raise type_error
        self._mount_path = mount_path

    @property
    def custom_init_params_file(self):
        """Gets the custom_init_params_file of this VirtualSourceDefinition.

        Each line in file, parameter=value

        :return: The custom_init_params_file of this VirtualSourceDefinition.
        :rtype: str
        """
        return self._custom_init_params_file

    @custom_init_params_file.setter
    def custom_init_params_file(self, custom_init_params_file):
        """Sets the custom_init_params_file of this VirtualSourceDefinition.

        Each line in file, parameter=value

        :param custom_init_params_file: The custom_init_params_file of this VirtualSourceDefinition.
        :type custom_init_params_file: str
        """
        # Validating the attribute custom_init_params_file and then saving it.
        type_error = GeneratedClassesTypeError.type_error(VirtualSourceDefinition,
                                                          'custom_init_params_file',
                                                          custom_init_params_file,
                                                          str,
                                                          False)
        if type_error:
            raise type_error
        self._custom_init_params_file = custom_init_params_file

    @property
    def custom_init_params(self):
        """Gets the custom_init_params of this VirtualSourceDefinition.

        

        :return: The custom_init_params of this VirtualSourceDefinition.
        :rtype: List[VirtualSourceDefinitionCustomInitParams]
        """
        return self._custom_init_params

    @custom_init_params.setter
    def custom_init_params(self, custom_init_params):
        """Sets the custom_init_params of this VirtualSourceDefinition.

        

        :param custom_init_params: The custom_init_params of this VirtualSourceDefinition.
        :type custom_init_params: List[VirtualSourceDefinitionCustomInitParams]
        """
        # Validating the attribute custom_init_params and then saving it.
        expected_type = util.convert_type('List[VirtualSourceDefinitionCustomInitParams]')
        element_type = util.get_contained_type('List[VirtualSourceDefinitionCustomInitParams]')
        type_error = GeneratedClassesTypeError.type_error(VirtualSourceDefinition,
                                                          'custom_init_params',
                                                          custom_init_params,
                                                          expected_type,
                                                          False,
                                                          element_type)
        if type_error:
            raise type_error
        self._custom_init_params = custom_init_params

    @property
    def archivelog_mode(self):
        """Gets the archivelog_mode of this VirtualSourceDefinition.

        

        :return: The archivelog_mode of this VirtualSourceDefinition.
        :rtype: bool
        """
        return self._archivelog_mode

    @archivelog_mode.setter
    def archivelog_mode(self, archivelog_mode):
        """Sets the archivelog_mode of this VirtualSourceDefinition.

        

        :param archivelog_mode: The archivelog_mode of this VirtualSourceDefinition.
        :type archivelog_mode: bool
        """
        # Validating the attribute archivelog_mode and then saving it.
        type_error = GeneratedClassesTypeError.type_error(VirtualSourceDefinition,
                                                          'archivelog_mode',
                                                          archivelog_mode,
                                                          bool,
                                                          False)
        if type_error:
            raise type_error
        self._archivelog_mode = archivelog_mode

    @property
    def password(self):
        """Gets the password of this VirtualSourceDefinition.

        Oracle User Password

        :return: The password of this VirtualSourceDefinition.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this VirtualSourceDefinition.

        Oracle User Password

        :param password: The password of this VirtualSourceDefinition.
        :type password: str
        """
        # Validating the attribute password and then saving it.
        if password is None:
            raise GeneratedClassesError(
                "The required parameter 'password' must not be 'None'.")
        type_error = GeneratedClassesTypeError.type_error(VirtualSourceDefinition,
                                                          'password',
                                                          password,
                                                          str,
                                                          True)
        if type_error:
            raise type_error
        self._password = password

    @property
    def instance_name(self):
        """Gets the instance_name of this VirtualSourceDefinition.

        Virtual Database Instance Name

        :return: The instance_name of this VirtualSourceDefinition.
        :rtype: str
        """
        return self._instance_name

    @instance_name.setter
    def instance_name(self, instance_name):
        """Sets the instance_name of this VirtualSourceDefinition.

        Virtual Database Instance Name

        :param instance_name: The instance_name of this VirtualSourceDefinition.
        :type instance_name: str
        """
        # Validating the attribute instance_name and then saving it.
        if instance_name is None:
            raise GeneratedClassesError(
                "The required parameter 'instance_name' must not be 'None'.")
        type_error = GeneratedClassesTypeError.type_error(VirtualSourceDefinition,
                                                          'instance_name',
                                                          instance_name,
                                                          str,
                                                          True)
        if type_error:
            raise type_error
        self._instance_name = instance_name

    @property
    def db_name(self):
        """Gets the db_name of this VirtualSourceDefinition.

        

        :return: The db_name of this VirtualSourceDefinition.
        :rtype: str
        """
        return self._db_name

    @db_name.setter
    def db_name(self, db_name):
        """Sets the db_name of this VirtualSourceDefinition.

        

        :param db_name: The db_name of this VirtualSourceDefinition.
        :type db_name: str
        """
        # Validating the attribute db_name and then saving it.
        if db_name is None:
            raise GeneratedClassesError(
                "The required parameter 'db_name' must not be 'None'.")
        type_error = GeneratedClassesTypeError.type_error(VirtualSourceDefinition,
                                                          'db_name',
                                                          db_name,
                                                          str,
                                                          True)
        if type_error:
            raise type_error
        if (db_name is not None
                and not re.search('^$|^[_a-zA-Z0-9]*$', db_name)):
            raise GeneratedClassesError(
                "Invalid value for 'db_name', was '{}' but must follow the"
                " pattern '^$|^[_a-zA-Z0-9]*$'.".format(db_name))
        self._db_name = db_name

    @property
    def dbunique_name(self):
        """Gets the dbunique_name of this VirtualSourceDefinition.

        

        :return: The dbunique_name of this VirtualSourceDefinition.
        :rtype: str
        """
        return self._dbunique_name

    @dbunique_name.setter
    def dbunique_name(self, dbunique_name):
        """Sets the dbunique_name of this VirtualSourceDefinition.

        

        :param dbunique_name: The dbunique_name of this VirtualSourceDefinition.
        :type dbunique_name: str
        """
        # Validating the attribute dbunique_name and then saving it.
        if dbunique_name is None:
            raise GeneratedClassesError(
                "The required parameter 'dbunique_name' must not be 'None'.")
        type_error = GeneratedClassesTypeError.type_error(VirtualSourceDefinition,
                                                          'dbunique_name',
                                                          dbunique_name,
                                                          str,
                                                          True)
        if type_error:
            raise type_error
        if (dbunique_name is not None
                and not re.search('^$|^[_a-zA-Z0-9]*$', dbunique_name)):
            raise GeneratedClassesError(
                "Invalid value for 'dbunique_name', was '{}' but must follow the"
                " pattern '^$|^[_a-zA-Z0-9]*$'.".format(dbunique_name))
        self._dbunique_name = dbunique_name
